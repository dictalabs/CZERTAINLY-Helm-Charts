{{/*
Retun the ephemeral volume configuration based on the configuration
{{ include "czertainly-lib.volumes.ephemeral" ( dict "volumes" .Values.volumes ) }}
*/}}
{{- define "czertainly-lib.volumes.ephemeral" -}}
{{- $ephemeralType := pluck "type" .global.ephemeral .volumes.ephemeral | compact | first -}}
{{- $ephemeralSizeLimit := pluck "sizeLimit" .global.ephemeral .volumes.ephemeral | compact | first -}}
{{- $ephemeralStorageClassName := pluck "storageClassName" .global.ephemeral .volumes.ephemeral | compact | first -}}
{{- $ephemeralCustom := pluck "custom" .global.ephemeral .volumes.ephemeral | compact | first -}}

{{- if eq $ephemeralType "memory" }}
emptyDir:
  medium: "Memory"
  sizeLimit: {{ $ephemeralSizeLimit | quote }}
{{- else if eq $ephemeralType "storage" }}
ephemeral:
  volumeClaimTemplate:
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- with $ephemeralStorageClassName }}
      storageClassName: {{ $ephemeralStorageClassName | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ $ephemeralSizeLimit | quote }}
{{- else if eq $ephemeralType "custom" }}
  {{- with $ephemeralCustom }}
{{ $ephemeralCustom | toYaml }}
  {{- end }}
{{- else }}
  {{- fail "Unrecognized type of the ephemeral volume" }}
{{- end }}

{{- end -}}